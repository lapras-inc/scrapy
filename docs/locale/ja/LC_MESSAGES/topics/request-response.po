# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-01 15:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../topics/request-response.rst:5
msgid "Requests and Responses"
msgstr ""

#: ../../topics/request-response.rst:10
msgid ""
"Scrapy uses :class:`Request` and :class:`Response` objects for crawling "
"web sites."
msgstr ""

#: ../../topics/request-response.rst:13
msgid ""
"Typically, :class:`Request` objects are generated in the spiders and pass"
" across the system until they reach the Downloader, which executes the "
"request and returns a :class:`Response` object which travels back to the "
"spider that issued the request."
msgstr ""

#: ../../topics/request-response.rst:18
msgid ""
"Both :class:`Request` and :class:`Response` classes have subclasses which"
" add functionality not required in the base classes. These are described "
"below in :ref:`topics-request-response-ref-request-subclasses` and :ref"
":`topics-request-response-ref-response-subclasses`."
msgstr ""

#: ../../topics/request-response.rst:25
msgid "Request objects"
msgstr ""

#: ../../topics/request-response.rst:29
msgid ""
"A :class:`Request` object represents an HTTP request, which is usually "
"generated in the Spider and executed by the Downloader, and thus "
"generating a :class:`Response`."
msgstr ""

#: ../../topics/request-response.rst
msgid "パラメータ"
msgstr ""

#: ../../topics/request-response.rst:33
msgid "the URL of this request"
msgstr ""

#: ../../topics/request-response.rst:36
msgid ""
"the function that will be called with the response of this request (once "
"its downloaded) as its first parameter. For more information see :ref"
":`topics-request-response-ref-request-callback-arguments` below. If a "
"Request doesn't specify a callback, the spider's "
":meth:`~scrapy.spiders.Spider.parse` method will be used. Note that if "
"exceptions are raised during processing, errback is called instead."
msgstr ""

#: ../../topics/request-response.rst:45
msgid "the HTTP method of this request. Defaults to ``'GET'``."
msgstr ""

#: ../../topics/request-response.rst:48
msgid ""
"the initial values for the :attr:`Request.meta` attribute. If given, the "
"dict passed in this parameter will be shallow copied."
msgstr ""

#: ../../topics/request-response.rst:52
msgid ""
"the request body. If a ``unicode`` is passed, then it's encoded to "
"``str`` using the `encoding` passed (which defaults to ``utf-8``). If "
"``body`` is not given, an empty string is stored. Regardless of the type "
"of this argument, the final value stored will be a ``str`` (never "
"``unicode`` or ``None``)."
msgstr ""

#: ../../topics/request-response.rst:59
msgid ""
"the headers of this request. The dict values can be strings (for single "
"valued headers) or lists (for multi-valued headers). If ``None`` is "
"passed as value, the HTTP header will not be sent at all."
msgstr ""

#: ../../topics/request-response.rst:64
msgid ""
"the request cookies. These can be sent in two forms.  1. Using a dict::"
"      request_with_cookies = Request(url=\"http://www.example.com\","
"                                    cookies={'currency': 'USD', "
"'country': 'UY'})  2. Using a list of dicts::      request_with_cookies ="
" Request(url=\"http://www.example.com\","
"                                    cookies=[{'name': 'currency',"
"                                             'value': 'USD',"
"                                             'domain': 'example.com',"
"                                             'path': '/currency'}])  The "
"latter form allows for customizing the ``domain`` and ``path`` attributes"
" of the cookie. This is only useful if the cookies are saved for later "
"requests.  .. reqmeta:: dont_merge_cookies  When some site returns "
"cookies (in a response) those are stored in the cookies for that domain "
"and will be sent again in future requests. That's the typical behaviour "
"of any regular web browser. However, if, for some reason, you want to "
"avoid merging with existing cookies you can instruct Scrapy to do so by "
"setting the ``dont_merge_cookies`` key to True in the "
":attr:`Request.meta`.  Example of request without merging cookies::      "
"request_with_cookies = Request(url=\"http://www.example.com\","
"                                    cookies={'currency': 'USD', "
"'country': 'UY'},                                    "
"meta={'dont_merge_cookies': True})  For more info see :ref:`cookies-mw`."
msgstr ""

#: ../../topics/request-response.rst:64
msgid "the request cookies. These can be sent in two forms."
msgstr ""

#: ../../topics/request-response.rst:66
msgid "Using a dict::"
msgstr ""

#: ../../topics/request-response.rst:71
msgid "Using a list of dicts::"
msgstr ""

#: ../../topics/request-response.rst:79
msgid ""
"The latter form allows for customizing the ``domain`` and ``path`` "
"attributes of the cookie. This is only useful if the cookies are saved "
"for later requests."
msgstr ""

#: ../../topics/request-response.rst:85
msgid ""
"When some site returns cookies (in a response) those are stored in the "
"cookies for that domain and will be sent again in future requests. That's"
" the typical behaviour of any regular web browser. However, if, for some "
"reason, you want to avoid merging with existing cookies you can instruct "
"Scrapy to do so by setting the ``dont_merge_cookies`` key to True in the "
":attr:`Request.meta`."
msgstr ""

#: ../../topics/request-response.rst:92
msgid "Example of request without merging cookies::"
msgstr ""

#: ../../topics/request-response.rst:98
msgid "For more info see :ref:`cookies-mw`."
msgstr ""

#: ../../topics/request-response.rst:101
msgid ""
"the encoding of this request (defaults to ``'utf-8'``). This encoding "
"will be used to percent-encode the URL and to convert the body to ``str``"
" (if given as ``unicode``)."
msgstr ""

#: ../../topics/request-response.rst:106
msgid ""
"the priority of this request (defaults to ``0``). The priority is used by"
" the scheduler to define the order used to process requests.  Requests "
"with a higher priority value will execute earlier. Negative values are "
"allowed in order to indicate relatively low-priority."
msgstr ""

#: ../../topics/request-response.rst:112
msgid ""
"indicates that this request should not be filtered by the scheduler. This"
" is used when you want to perform an identical request multiple times, to"
" ignore the duplicates filter. Use it with care, or you will get into "
"crawling loops. Default to ``False``."
msgstr ""

#: ../../topics/request-response.rst:118
msgid ""
"a function that will be called if any exception was raised while "
"processing the request. This includes pages that failed with 404 HTTP "
"errors and such. It receives a `Twisted Failure`_ instance as first "
"parameter. For more information, see :ref:`topics-request-response-ref-"
"errbacks` below."
msgstr ""

#: ../../topics/request-response.rst:126
msgid "Flags sent to the request, can be used for logging or similar purposes."
msgstr ""

#: ../../topics/request-response.rst:131
msgid ""
"A string containing the URL of this request. Keep in mind that this "
"attribute contains the escaped URL, so it can differ from the URL passed "
"in the constructor."
msgstr ""

#: ../../topics/request-response.rst:135
msgid ""
"This attribute is read-only. To change the URL of a Request use "
":meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:140
msgid ""
"A string representing the HTTP method in the request. This is guaranteed "
"to be uppercase. Example: ``\"GET\"``, ``\"POST\"``, ``\"PUT\"``, etc"
msgstr ""

#: ../../topics/request-response.rst:145
msgid "A dictionary-like object which contains the request headers."
msgstr ""

#: ../../topics/request-response.rst:149
msgid "A str that contains the request body."
msgstr ""

#: ../../topics/request-response.rst:151
msgid ""
"This attribute is read-only. To change the body of a Request use "
":meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:156
msgid ""
"A dict that contains arbitrary metadata for this request. This dict is "
"empty for new Requests, and is usually  populated by different Scrapy "
"components (extensions, middlewares, etc). So the data contained in this "
"dict depends on the extensions you have enabled."
msgstr ""

#: ../../topics/request-response.rst:161
msgid ""
"See :ref:`topics-request-meta` for a list of special meta keys recognized"
" by Scrapy."
msgstr ""

#: ../../topics/request-response.rst:164
msgid ""
"This dict is `shallow copied`_ when the request is cloned using the "
"``copy()`` or ``replace()`` methods, and can also be accessed, in your "
"spider, from the ``response.meta`` attribute."
msgstr ""

#: ../../topics/request-response.rst:172
msgid ""
"Return a new Request which is a copy of this Request. See also: :ref"
":`topics-request-response-ref-request-callback-arguments`."
msgstr ""

#: ../../topics/request-response.rst:177
msgid ""
"Return a Request object with the same members, except for those members "
"given new values by whichever keyword arguments are specified. The "
"attribute :attr:`Request.meta` is copied by default (unless a new value "
"is given in the ``meta`` argument). See also :ref:`topics-request-"
"response-ref-request-callback-arguments`."
msgstr ""

#: ../../topics/request-response.rst:186
msgid "Passing additional data to callback functions"
msgstr ""

#: ../../topics/request-response.rst:188
msgid ""
"The callback of a request is a function that will be called when the "
"response of that request is downloaded. The callback function will be "
"called with the downloaded :class:`Response` object as its first "
"argument."
msgstr ""

#: ../../topics/request-response.rst:192
msgid "Example::"
msgstr ""

#: ../../topics/request-response.rst:202
msgid ""
"In some cases you may be interested in passing arguments to those "
"callback functions so you can receive the arguments later, in the second "
"callback. You can use the :attr:`Request.meta` attribute for that."
msgstr ""

#: ../../topics/request-response.rst:206
msgid ""
"Here's an example of how to pass an item using this mechanism, to "
"populate different fields from different pages::"
msgstr ""

#: ../../topics/request-response.rst:226
msgid "Using errbacks to catch exceptions in request processing"
msgstr ""

#: ../../topics/request-response.rst:228
msgid ""
"The errback of a request is a function that will be called when an "
"exception is raise while processing it."
msgstr ""

#: ../../topics/request-response.rst:231
msgid ""
"It receives a `Twisted Failure`_ instance as first parameter and can be "
"used to track connection establishment timeouts, DNS errors etc."
msgstr ""

#: ../../topics/request-response.rst:234
msgid ""
"Here's an example spider logging all errors and catching some specific "
"errors if needed::"
msgstr ""

#: ../../topics/request-response.rst:288
msgid "Request.meta special keys"
msgstr ""

#: ../../topics/request-response.rst:290
msgid ""
"The :attr:`Request.meta` attribute can contain any arbitrary data, but "
"there are some special keys recognized by Scrapy and its built-in "
"extensions."
msgstr ""

#: ../../topics/request-response.rst:293
msgid "Those are:"
msgstr ""

#: ../../topics/request-response.rst:295
msgid ":reqmeta:`dont_redirect`"
msgstr ""

#: ../../topics/request-response.rst:296
msgid ":reqmeta:`dont_retry`"
msgstr ""

#: ../../topics/request-response.rst:297
msgid ":reqmeta:`handle_httpstatus_list`"
msgstr ""

#: ../../topics/request-response.rst:298
msgid ":reqmeta:`handle_httpstatus_all`"
msgstr ""

#: ../../topics/request-response.rst:299
msgid ":reqmeta:`dont_merge_cookies`"
msgstr ""

#: ../../topics/request-response.rst:300
msgid ":reqmeta:`cookiejar`"
msgstr ""

#: ../../topics/request-response.rst:301
msgid ":reqmeta:`dont_cache`"
msgstr ""

#: ../../topics/request-response.rst:302
msgid ":reqmeta:`redirect_urls`"
msgstr ""

#: ../../topics/request-response.rst:303
msgid ":reqmeta:`bindaddress`"
msgstr ""

#: ../../topics/request-response.rst:304
msgid ":reqmeta:`dont_obey_robotstxt`"
msgstr ""

#: ../../topics/request-response.rst:305
msgid ":reqmeta:`download_timeout`"
msgstr ""

#: ../../topics/request-response.rst:306
msgid ":reqmeta:`download_maxsize`"
msgstr ""

#: ../../topics/request-response.rst:307
msgid ":reqmeta:`download_latency`"
msgstr ""

#: ../../topics/request-response.rst:308
msgid ":reqmeta:`download_fail_on_dataloss`"
msgstr ""

#: ../../topics/request-response.rst:309
msgid ":reqmeta:`proxy`"
msgstr ""

#: ../../topics/request-response.rst:310
msgid "``ftp_user`` (See :setting:`FTP_USER` for more info)"
msgstr ""

#: ../../topics/request-response.rst:311
msgid "``ftp_password`` (See :setting:`FTP_PASSWORD` for more info)"
msgstr ""

#: ../../topics/request-response.rst:312
msgid ":reqmeta:`referrer_policy`"
msgstr ""

#: ../../topics/request-response.rst:313
msgid ":reqmeta:`max_retry_times`"
msgstr ""

#: ../../topics/request-response.rst:318
msgid "bindaddress"
msgstr ""

#: ../../topics/request-response.rst:320
msgid "The IP of the outgoing IP address to use for the performing the request."
msgstr ""

#: ../../topics/request-response.rst:325
msgid "download_timeout"
msgstr ""

#: ../../topics/request-response.rst:327
msgid ""
"The amount of time (in secs) that the downloader will wait before timing "
"out. See also: :setting:`DOWNLOAD_TIMEOUT`."
msgstr ""

#: ../../topics/request-response.rst:333
msgid "download_latency"
msgstr ""

#: ../../topics/request-response.rst:335
msgid ""
"The amount of time spent to fetch the response, since the request has "
"been started, i.e. HTTP message sent over the network. This meta key only"
" becomes available when the response has been downloaded. While most "
"other meta keys are used to control Scrapy behavior, this one is supposed"
" to be read-only."
msgstr ""

#: ../../topics/request-response.rst:343
msgid "download_fail_on_dataloss"
msgstr ""

#: ../../topics/request-response.rst:345
msgid ""
"Whether or not to fail on broken responses. See: "
":setting:`DOWNLOAD_FAIL_ON_DATALOSS`."
msgstr ""

#: ../../topics/request-response.rst:351
msgid "max_retry_times"
msgstr ""

#: ../../topics/request-response.rst:353
msgid ""
"The meta key is used set retry times per request. When initialized, the "
":reqmeta:`max_retry_times` meta key takes higher precedence over the "
":setting:`RETRY_TIMES` setting."
msgstr ""

#: ../../topics/request-response.rst:360
msgid "Request subclasses"
msgstr ""

#: ../../topics/request-response.rst:362
msgid ""
"Here is the list of built-in :class:`Request` subclasses. You can also "
"subclass it to implement your own custom functionality."
msgstr ""

#: ../../topics/request-response.rst:366
msgid "FormRequest objects"
msgstr ""

#: ../../topics/request-response.rst:368
msgid ""
"The FormRequest class extends the base :class:`Request` with "
"functionality for dealing with HTML forms. It uses `lxml.html forms`_  to"
" pre-populate form fields with form data from :class:`Response` objects."
msgstr ""

#: ../../topics/request-response.rst:376
msgid ""
"The :class:`FormRequest` class adds a new argument to the constructor. "
"The remaining arguments are the same as for the :class:`Request` class "
"and are not documented here."
msgstr ""

#: ../../topics/request-response.rst:380
msgid ""
"is a dictionary (or iterable of (key, value) tuples) containing HTML Form"
" data which will be url-encoded and assigned to the body of the request."
msgstr ""

#: ../../topics/request-response.rst:385
msgid ""
"The :class:`FormRequest` objects support the following class method in "
"addition to the standard :class:`Request` methods:"
msgstr ""

#: ../../topics/request-response.rst:390
msgid ""
"Returns a new :class:`FormRequest` object with its form field values pre-"
"populated with those found in the HTML ``<form>`` element contained in "
"the given response. For an example see :ref:`topics-request-response-ref-"
"request-userlogin`."
msgstr ""

#: ../../topics/request-response.rst:395
msgid ""
"The policy is to automatically simulate a click, by default, on any form "
"control that looks clickable, like a ``<input type=\"submit\">``.  Even "
"though this is quite convenient, and often the desired behaviour, "
"sometimes it can cause problems which could be hard to debug. For "
"example, when working with forms that are filled and/or submitted using "
"javascript, the default :meth:`from_response` behaviour may not be the "
"most appropriate. To disable this behaviour you can set the "
"``dont_click`` argument to ``True``. Also, if you want to change the "
"control clicked (instead of disabling it) you can also use the "
"``clickdata`` argument."
msgstr ""

#: ../../topics/request-response.rst:406
msgid ""
"Using this method with select elements which have leading or trailing "
"whitespace in the option values will not work due to a `bug in lxml`_, "
"which should be fixed in lxml 3.8 and above."
msgstr ""

#: ../../topics/request-response.rst:410
msgid ""
"the response containing a HTML form which will be used to pre-populate "
"the form fields"
msgstr ""

#: ../../topics/request-response.rst:414
msgid "if given, the form with name attribute set to this value will be used."
msgstr ""

#: ../../topics/request-response.rst:417
msgid "if given, the form with id attribute set to this value will be used."
msgstr ""

#: ../../topics/request-response.rst:420
msgid "if given, the first form that matches the xpath will be used."
msgstr ""

#: ../../topics/request-response.rst:423
msgid "if given, the first form that matches the css selector will be used."
msgstr ""

#: ../../topics/request-response.rst:426
msgid ""
"the number of form to use, when the response contains multiple forms. The"
" first one (and also the default) is ``0``."
msgstr ""

#: ../../topics/request-response.rst:430
msgid ""
"fields to override in the form data. If a field was already present in "
"the response ``<form>`` element, its value is overridden by the one "
"passed in this parameter. If a value passed in this parameter is "
"``None``, the field will not be included in the request, even if it was "
"present in the response ``<form>`` element."
msgstr ""

#: ../../topics/request-response.rst:437
msgid ""
"attributes to lookup the control clicked. If it's not given, the form "
"data will be submitted simulating a click on the first clickable element."
" In addition to html attributes, the control can be identified by its "
"zero-based index relative to other submittable inputs inside the form, "
"via the ``nr`` attribute."
msgstr ""

#: ../../topics/request-response.rst:444
msgid "If True, the form data will be submitted without clicking in any element."
msgstr ""

#: ../../topics/request-response.rst:448
msgid ""
"The other parameters of this class method are passed directly to the "
":class:`FormRequest` constructor."
msgstr ""

#: ../../topics/request-response.rst:451
msgid "The ``formname`` parameter."
msgstr ""

#: ../../topics/request-response.rst:454
msgid "The ``formxpath`` parameter."
msgstr ""

#: ../../topics/request-response.rst:457
msgid "The ``formcss`` parameter."
msgstr ""

#: ../../topics/request-response.rst:460
msgid "The ``formid`` parameter."
msgstr ""

#: ../../topics/request-response.rst:464
msgid "Request usage examples"
msgstr ""

#: ../../topics/request-response.rst:467
msgid "Using FormRequest to send data via HTTP POST"
msgstr ""

#: ../../topics/request-response.rst:469
msgid ""
"If you want to simulate a HTML Form POST in your spider and send a couple"
" of key-value fields, you can return a :class:`FormRequest` object (from "
"your spider) like this::"
msgstr ""

#: ../../topics/request-response.rst:480
msgid "Using FormRequest.from_response() to simulate a user login"
msgstr ""

#: ../../topics/request-response.rst:482
msgid ""
"It is usual for web sites to provide pre-populated form fields through "
"``<input type=\"hidden\">`` elements, such as session related data or "
"authentication tokens (for login pages). When scraping, you'll want these"
" fields to be automatically pre-populated and only override a couple of "
"them, such as the user name and password. You can use the "
":meth:`FormRequest.from_response` method for this job. Here's an example "
"spider which uses it::"
msgstr ""

#: ../../topics/request-response.rst:517
msgid "Response objects"
msgstr ""

#: ../../topics/request-response.rst:521
msgid ""
"A :class:`Response` object represents an HTTP response, which is usually "
"downloaded (by the Downloader) and fed to the Spiders for processing."
msgstr ""

#: ../../topics/request-response.rst:524
msgid "the URL of this response"
msgstr ""

#: ../../topics/request-response.rst:527
msgid "the HTTP status of the response. Defaults to ``200``."
msgstr ""

#: ../../topics/request-response.rst:530
msgid ""
"the headers of this response. The dict values can be strings (for single "
"valued headers) or lists (for multi-valued headers)."
msgstr ""

#: ../../topics/request-response.rst:534
msgid ""
"the response body. To access the decoded text as str (unicode in Python "
"2) you can use ``response.text`` from an encoding-aware :ref:`Response "
"subclass <topics-request-response-ref-response-subclasses>`, such as "
":class:`TextResponse`."
msgstr ""

#: ../../topics/request-response.rst:540
msgid ""
"is a list containing the initial values for the :attr:`Response.flags` "
"attribute. If given, the list will be shallow copied."
msgstr ""

#: ../../topics/request-response.rst:545
msgid ""
"the initial value of the :attr:`Response.request` attribute. This "
"represents the :class:`Request` that generated this response."
msgstr ""

#: ../../topics/request-response.rst:551
msgid "A string containing the URL of the response."
msgstr ""

#: ../../topics/request-response.rst:553
msgid ""
"This attribute is read-only. To change the URL of a Response use "
":meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:558
msgid ""
"An integer representing the HTTP status of the response. Example: "
"``200``, ``404``."
msgstr ""

#: ../../topics/request-response.rst:563
msgid ""
"A dictionary-like object which contains the response headers. Values can "
"be accessed using :meth:`get` to return the first header value with the "
"specified name or :meth:`getlist` to return all header values with the "
"specified name. For example, this call will give you all cookies in the "
"headers::"
msgstr ""

#: ../../topics/request-response.rst:573
msgid ""
"The body of this Response. Keep in mind that Response.body is always a "
"bytes object. If you want the unicode version use "
":attr:`TextResponse.text` (only available in :class:`TextResponse` and "
"subclasses)."
msgstr ""

#: ../../topics/request-response.rst:578
msgid ""
"This attribute is read-only. To change the body of a Response use "
":meth:`replace`."
msgstr ""

#: ../../topics/request-response.rst:583
msgid ""
"The :class:`Request` object that generated this response. This attribute "
"is assigned in the Scrapy engine, after the response and the request have"
" passed through all :ref:`Downloader Middlewares <topics-downloader-"
"middleware>`. In particular, this means that:"
msgstr ""

#: ../../topics/request-response.rst:588
msgid ""
"HTTP redirections will cause the original request (to the URL before "
"redirection) to be assigned to the redirected response (with the final "
"URL after redirection)."
msgstr ""

#: ../../topics/request-response.rst:592
msgid "Response.request.url doesn't always equal Response.url"
msgstr ""

#: ../../topics/request-response.rst:594
msgid ""
"This attribute is only available in the spider code, and in the "
":ref:`Spider Middlewares <topics-spider-middleware>`, but not in "
"Downloader Middlewares (although you have the Request available there by "
"other means) and handlers of the :signal:`response_downloaded` signal."
msgstr ""

#: ../../topics/request-response.rst:601
msgid ""
"A shortcut to the :attr:`Request.meta` attribute of the "
":attr:`Response.request` object (ie. ``self.request.meta``)."
msgstr ""

#: ../../topics/request-response.rst:604
msgid ""
"Unlike the :attr:`Response.request` attribute, the :attr:`Response.meta` "
"attribute is propagated along redirects and retries, so you will get the "
"original :attr:`Request.meta` sent from your spider."
msgstr ""

#: ../../topics/request-response.rst:608
msgid ":attr:`Request.meta` attribute"
msgstr ""

#: ../../topics/request-response.rst:612
msgid ""
"A list that contains flags for this response. Flags are labels used for "
"tagging Responses. For example: `'cached'`, `'redirected`', etc. And "
"they're shown on the string representation of the Response (`__str__` "
"method) which is used by the engine for logging."
msgstr ""

#: ../../topics/request-response.rst:619
msgid "Returns a new Response which is a copy of this Response."
msgstr ""

#: ../../topics/request-response.rst:623
msgid ""
"Returns a Response object with the same members, except for those members"
" given new values by whichever keyword arguments are specified. The "
"attribute :attr:`Response.meta` is copied by default."
msgstr ""

#: ../../topics/request-response.rst:629
msgid ""
"Constructs an absolute url by combining the Response's :attr:`url` with a"
" possible relative url."
msgstr ""

#: ../../topics/request-response.rst:632
msgid ""
"This is a wrapper over `urlparse.urljoin`_, it's merely an alias for "
"making this call::"
msgstr ""

#: of scrapy.http.Response.follow:1
msgid ""
"Return a :class:`~.Request` instance to follow a link ``url``. It accepts"
" the same arguments as ``Request.__init__`` method, but ``url`` can be a "
"relative URL or a ``scrapy.link.Link`` object, not only an absolute URL."
msgstr ""

#: of scrapy.http.Response.follow:6
msgid ""
":class:`~.TextResponse` provides a :meth:`~.TextResponse.follow`  method "
"which supports selectors in addition to absolute/relative URLs and Link "
"objects."
msgstr ""

#: ../../topics/request-response.rst:645
msgid "Response subclasses"
msgstr ""

#: ../../topics/request-response.rst:647
msgid ""
"Here is the list of available built-in Response subclasses. You can also "
"subclass the Response class to implement your own functionality."
msgstr ""

#: ../../topics/request-response.rst:651
msgid "TextResponse objects"
msgstr ""

#: ../../topics/request-response.rst:655
msgid ""
":class:`TextResponse` objects adds encoding capabilities to the base "
":class:`Response` class, which is meant to be used only for binary data, "
"such as images, sounds or any media file."
msgstr ""

#: ../../topics/request-response.rst:659
msgid ""
":class:`TextResponse` objects support a new constructor argument, in "
"addition to the base :class:`Response` objects. The remaining "
"functionality is the same as for the :class:`Response` class and is not "
"documented here."
msgstr ""

#: ../../topics/request-response.rst:663
msgid ""
"is a string which contains the encoding to use for this response. If you "
"create a :class:`TextResponse` object with a unicode body, it will be "
"encoded using this encoding (remember the body attribute is always a "
"string). If ``encoding`` is ``None`` (default value), the encoding will "
"be looked up in the response headers and body instead."
msgstr ""

#: ../../topics/request-response.rst:670
msgid ""
":class:`TextResponse` objects support the following attributes in "
"addition to the standard :class:`Response` ones:"
msgstr ""

#: ../../topics/request-response.rst:675
msgid "Response body, as unicode."
msgstr ""

#: ../../topics/request-response.rst:677
msgid ""
"The same as ``response.body.decode(response.encoding)``, but the result "
"is cached after the first call, so you can access ``response.text`` "
"multiple times without extra overhead."
msgstr ""

#: ../../topics/request-response.rst:683
msgid ""
"``unicode(response.body)`` is not a correct way to convert response body "
"to unicode: you would be using the system default encoding (typically "
"`ascii`) instead of the response encoding."
msgstr ""

#: ../../topics/request-response.rst:690
msgid ""
"A string with the encoding of this response. The encoding is resolved by "
"trying the following mechanisms, in order:"
msgstr ""

#: ../../topics/request-response.rst:693
msgid "the encoding passed in the constructor `encoding` argument"
msgstr ""

#: ../../topics/request-response.rst:695
msgid ""
"the encoding declared in the Content-Type HTTP header. If this encoding "
"is not valid (ie. unknown), it is ignored and the next resolution "
"mechanism is tried."
msgstr ""

#: ../../topics/request-response.rst:699
msgid ""
"the encoding declared in the response body. The TextResponse class "
"doesn't provide any special functionality for this. However, the "
":class:`HtmlResponse` and :class:`XmlResponse` classes do."
msgstr ""

#: ../../topics/request-response.rst:703
msgid ""
"the encoding inferred by looking at the response body. This is the more "
"fragile method but also the last one tried."
msgstr ""

#: ../../topics/request-response.rst:708
msgid ""
"A :class:`~scrapy.selector.Selector` instance using the response as "
"target. The selector is lazily instantiated on first access."
msgstr ""

#: ../../topics/request-response.rst:711
msgid ""
":class:`TextResponse` objects support the following methods in addition "
"to the standard :class:`Response` ones:"
msgstr ""

#: ../../topics/request-response.rst:716
msgid "A shortcut to ``TextResponse.selector.xpath(query)``::"
msgstr ""

#: ../../topics/request-response.rst:722
msgid "A shortcut to ``TextResponse.selector.css(query)``::"
msgstr ""

#: of scrapy.http.TextResponse.follow:1
msgid ""
"Return a :class:`~.Request` instance to follow a link ``url``. It accepts"
" the same arguments as ``Request.__init__`` method, but ``url`` can be "
"not only an absolute URL, but also"
msgstr ""

#: of scrapy.http.TextResponse.follow:5
msgid "a relative URL;"
msgstr ""

#: of scrapy.http.TextResponse.follow:6
msgid "a scrapy.link.Link object (e.g. a link extractor result);"
msgstr ""

#: of scrapy.http.TextResponse.follow:7
msgid ""
"an attribute Selector (not SelectorList) - e.g. "
"``response.css('a::attr(href)')[0]`` or "
"``response.xpath('//img/@src')[0]``."
msgstr ""

#: of scrapy.http.TextResponse.follow:10
msgid ""
"a Selector for ``<a>`` or ``<link>`` element, e.g. "
"``response.css('a.my_link')[0]``."
msgstr ""

#: of scrapy.http.TextResponse.follow:13
msgid "See :ref:`response-follow-example` for usage examples."
msgstr ""

#: ../../topics/request-response.rst:730
msgid ""
"The same as :attr:`text`, but available as a method. This method is kept "
"for backwards compatibility; please prefer ``response.text``."
msgstr ""

#: ../../topics/request-response.rst:735
msgid "HtmlResponse objects"
msgstr ""

#: ../../topics/request-response.rst:739
msgid ""
"The :class:`HtmlResponse` class is a subclass of :class:`TextResponse` "
"which adds encoding auto-discovering support by looking into the HTML "
"`meta http-equiv`_ attribute.  See :attr:`TextResponse.encoding`."
msgstr ""

#: ../../topics/request-response.rst:746
msgid "XmlResponse objects"
msgstr ""

#: ../../topics/request-response.rst:750
msgid ""
"The :class:`XmlResponse` class is a subclass of :class:`TextResponse` "
"which adds encoding auto-discovering support by looking into the XML "
"declaration line.  See :attr:`TextResponse.encoding`."
msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

