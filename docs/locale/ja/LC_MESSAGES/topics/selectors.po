# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008–2018, Scrapy developers
# This file is distributed under the same license as the Scrapy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Scrapy 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-01 15:48+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../topics/selectors.rst:5
msgid "Selectors"
msgstr "セレクタ"

#: ../../topics/selectors.rst:7
#, fuzzy
msgid ""
"When you're scraping web pages, the most common task you need to perform "
"is to extract data from the HTML source. There are several libraries "
"available to achieve this, such as:"
msgstr "Webページをスクレイピングするときに必要な最も一般的な作業は、HTMLソースからデータを抽出することです。これを達成するために利用可能ないくつかのライブラリがあります。"

#: ../../topics/selectors.rst:11
msgid ""
"`BeautifulSoup`_ is a very popular web scraping library among Python "
"programmers which constructs a Python object based on the structure of "
"the HTML code and also deals with bad markup reasonably well, but it has "
"one drawback: it's slow."
msgstr ""
"`BeautifulSoup`_ "
"は、Pythonプログラマーの間で非常に人気のあるWebスクレイピングライブラリです。HTMLコードの構造に基づいてPythonオブジェクトを作成し、また、不適切なマークアップを適切に処理しますが、遅いという欠点があります。"

#: ../../topics/selectors.rst:16
msgid ""
"`lxml`_ is an XML parsing library (which also parses HTML) with a "
"pythonic API based on `ElementTree`_. (lxml is not part of the Python "
"standard library.)"
msgstr ""
"`lxml`_ は、 `ElementTree`_ "
"をベースにしたPythonicなAPIを備えたXML解析ライブラリ（HTMLも解析できます）です。lxmlはPython標準ライブラリの一部ではありません。"

#: ../../topics/selectors.rst:20
msgid ""
"Scrapy comes with its own mechanism for extracting data. They're called "
"selectors because they \"select\" certain parts of the HTML document "
"specified either by `XPath`_ or `CSS`_ expressions."
msgstr ""
"Scrapyには、データを抽出するための独自のメカニズムが付属しています。HTMLドキュメントの特定の部分を `XPath`_ 式または "
"`CSS`_ 式で「選択」するため、これらはセレクタと呼ばれます。"

#: ../../topics/selectors.rst:24
msgid ""
"`XPath`_ is a language for selecting nodes in XML documents, which can "
"also be used with HTML. `CSS`_ is a language for applying styles to HTML "
"documents. It defines selectors to associate those styles with specific "
"HTML elements."
msgstr ""
"`XPath`_ はXML文書内のノードを選択するための言語ですが、HTMLでも使用できます。 `CSS`_ "
"はHTMLドキュメントにスタイルを適用するための言語です。スタイルを特定のHTML要素に関連付けるためのセレクタを定義します。"

#: ../../topics/selectors.rst:29
msgid ""
"Scrapy Selectors is a thin wrapper around `parsel`_ library; the purpose "
"of this wrapper is to provide better integration with Scrapy Response "
"objects."
msgstr ""

#: ../../topics/selectors.rst:32
msgid ""
"`parsel`_ is a stand-alone web scraping library which can be used without"
" Scrapy. It uses `lxml`_ library under the hood, and implements an easy "
"API on top of lxml API. It means Scrapy selectors are very similar in "
"speed and parsing accuracy to lxml."
msgstr ""

#: ../../topics/selectors.rst:46 ../../topics/selectors.rst:97
msgid "Using selectors"
msgstr "セレクタの使用"

#: ../../topics/selectors.rst:49
msgid "Constructing selectors"
msgstr "セレクタの構築"

#: ../../topics/selectors.rst:53
msgid ""
"Response objects expose a :class:`~scrapy.selector.Selector` instance on "
"``.selector`` attribute::"
msgstr ""

#: ../../topics/selectors.rst:59
#, fuzzy
msgid ""
"Querying responses using XPath and CSS is so common that responses "
"include two more shortcuts: ``response.xpath()`` and ``response.css()``::"
msgstr ""
"XPathやCSSを使用してレスポンスを問い合わせるのはとても一般的なので、responseには ``response.xpath()`` と "
"``response.css()`` の2つの便利なショートカットが含まれています。"

#: ../../topics/selectors.rst:67
msgid ""
"Scrapy selectors are instances of :class:`~scrapy.selector.Selector` "
"class constructed by passing either :class:`~scrapy.http.TextResponse` "
"object or markup as an unicode string (in ``text`` argument). Usually "
"there is no need to construct Scrapy selectors manually: ``response`` "
"object is available in Spider callbacks, so in most cases it is more "
"convenient to use ``response.css()`` and ``response.xpath()`` shortcuts. "
"By using ``response.selector`` or one of these shortcuts you can also "
"ensure the response body is parsed only once."
msgstr ""

#: ../../topics/selectors.rst:76
msgid ""
"But if required, it is possible to use ``Selector`` directly. "
"Constructing from text::"
msgstr ""

#: ../../topics/selectors.rst:84
msgid ""
"Constructing from response - :class:`~scrapy.http.HtmlResponse` is one of"
" :class:`~scrapy.http.TextResponse` subclasses::"
msgstr ""

#: ../../topics/selectors.rst:93
msgid ""
"``Selector`` automatically chooses the best parsing rules (XML vs HTML) "
"based on input type."
msgstr ""

#: ../../topics/selectors.rst:99
msgid ""
"To explain how to use the selectors we'll use the `Scrapy shell` (which "
"provides interactive testing) and an example page located in the Scrapy "
"documentation server:"
msgstr ""
"セレクタの使用方法を説明するために、 `Scrapyシェル` "
"（これは対話式のテストを提供します）とScrapy文書サーバーにあるサンプルページを使用します。"

#: ../../topics/selectors.rst:103
msgid "https://docs.scrapy.org/en/latest/_static/selectors-sample1.html"
msgstr ""

#: ../../topics/selectors.rst:107
msgid "For the sake of completeness, here's its full HTML code:"
msgstr ""

#: ../../topics/selectors.rst:114
msgid "First, let's open the shell::"
msgstr "まず、シェルを開きましょう。"

#: ../../topics/selectors.rst:118
msgid ""
"Then, after the shell loads, you'll have the response available as "
"``response`` shell variable, and its attached selector in "
"``response.selector`` attribute."
msgstr ""
"シェルがロードされた後に、レスポンスとして利用可能な ``response`` シェル変数と、セレクタとして利用可能な "
"``response.selector`` 属性を使うことができます。"

#: ../../topics/selectors.rst:121
msgid ""
"Since we're dealing with HTML, the selector will automatically use an "
"HTML parser."
msgstr "HTMLを扱うので、セレクタは自動的にHTMLパーサーになります。"

#: ../../topics/selectors.rst:125
msgid ""
"So, by looking at the :ref:`HTML code <topics-selectors-htmlcode>` of "
"that page, let's construct an XPath for selecting the text inside the "
"title tag::"
msgstr ""
"そのページの :ref:`HTMLコード <topics-selectors-htmlcode>` "
"を見て、titleタグ内のテキストを選択するためのXPathを作成しましょう。"

#: ../../topics/selectors.rst:131
#, fuzzy
msgid ""
"To actually extract the textual data, you must call the selector "
"``.get()`` or ``.getall()`` methods, as follows::"
msgstr "実際のテキストデータを抽出するには、次のようにselectorの ``.extract()`` メソッドを呼び出す必要があります。"

#: ../../topics/selectors.rst:139
msgid ""
"``.get()`` always returns a single result; if there are several matches, "
"content of a first match is returned; if there are no matches, None is "
"returned. ``.getall()`` returns a list with all results."
msgstr ""

#: ../../topics/selectors.rst:143
msgid ""
"Notice that CSS selectors can select text or attribute nodes using CSS3 "
"pseudo-elements::"
msgstr "CSSセレクタの場合は、CSS3の疑似要素を使用してテキストまたは属性ノードを選択できることに注意してください。"

#: ../../topics/selectors.rst:149
msgid ""
"As you can see, ``.xpath()`` and ``.css()`` methods return a "
":class:`~scrapy.selector.SelectorList` instance, which is a list of new "
"selectors. This API can be used for quickly selecting nested data::"
msgstr ""
"ご覧のように、 ``.xpath()`` および ``.css()`` メソッドは、新しいセレクタのリストである "
":class:`~scrapy.selector.SelectorList` "
"インスタンスを返します。このAPIはネストしたデータを素早く選択するために使用できます。"

#: ../../topics/selectors.rst:160
#, fuzzy
msgid ""
"If you want to extract only the first matched element, you can call the "
"selector ``.get()`` (or its alias ``.extract_first()`` commonly used in "
"previous Scrapy versions)::"
msgstr "最初に一致した要素だけを抽出したい場合は、selectorの ``.extract_first()`` を呼び出すことができます。"

#: ../../topics/selectors.rst:167
#, fuzzy
msgid "It returns ``None`` if no element was found::"
msgstr "要素が見つからなかった場合は ``None`` を返します。"

#: ../../topics/selectors.rst:172
msgid ""
"A default return value can be provided as an argument, to be used instead"
" of ``None``:"
msgstr "デフォルトの戻り値を引数として渡し、 ``None`` の代わりに使用することもできます。"

#: ../../topics/selectors.rst:178
msgid ""
"Instead of using e.g. ``'@src'`` XPath it is possible to query for "
"attributes using ``.attrib`` property of a "
":class:`~scrapy.selector.Selector`::"
msgstr ""

#: ../../topics/selectors.rst:188
msgid ""
"As a shortcut, ``.attrib`` is also available on SelectorList directly; it"
" returns attributes for the first matching element::"
msgstr ""

#: ../../topics/selectors.rst:194
msgid ""
"This is most useful when only a single result is expected, e.g. when "
"selecting by id, or selecting unique elements on a web page::"
msgstr ""

#: ../../topics/selectors.rst:200
msgid "Now we're going to get the base URL and some image links::"
msgstr "ベースURLと画像リンクを取得します。"

#: ../../topics/selectors.rst:242
#, fuzzy
msgid "Extensions to CSS Selectors"
msgstr "セレクタの使用"

#: ../../topics/selectors.rst:244
msgid ""
"Per W3C standards, `CSS selectors`_ do not support selecting text nodes "
"or attribute values. But selecting these is so essential in a web "
"scraping context that Scrapy (parsel) implements a couple of **non-"
"standard pseudo-elements**:"
msgstr ""

#: ../../topics/selectors.rst:249
msgid "to select text nodes, use ``::text``"
msgstr ""

#: ../../topics/selectors.rst:250
msgid ""
"to select attribute values, use ``::attr(name)`` where *name* is the name"
" of the attribute that you want the value of"
msgstr ""

#: ../../topics/selectors.rst:254
msgid ""
"These pseudo-elements are Scrapy-/Parsel-specific. They will most "
"probably not work with other libraries like `lxml`_ or `PyQuery`_."
msgstr ""

#: ../../topics/selectors.rst:260
#, fuzzy
msgid "Examples:"
msgstr "例："

#: ../../topics/selectors.rst:262
msgid ""
"``title::text`` selects children text nodes of a descendant ``<title>`` "
"element::"
msgstr ""

#: ../../topics/selectors.rst:267
msgid ""
"``*::text`` selects all descendant text nodes of the current selector "
"context::"
msgstr ""

#: ../../topics/selectors.rst:282
msgid ""
"``foo::text`` returns no results if ``foo`` element exists, but contains "
"no text (i.e. text is empty)::"
msgstr ""

#: ../../topics/selectors.rst:288
msgid ""
"This means ``.css('foo::text').get()`` could return None even if an "
"element exists. Use ``default=''`` if you always want a string::"
msgstr ""

#: ../../topics/selectors.rst:295
msgid "``a::attr(href)`` selects the *href* attribute value of descendant links::"
msgstr ""

#: ../../topics/selectors.rst:305
msgid "See also: :ref:`selecting-attributes`."
msgstr ""

#: ../../topics/selectors.rst:308
msgid ""
"You cannot chain these pseudo-elements. But in practice it would not make"
" much sense: text nodes do not have attributes, and attribute values are "
"string values already and do not have children nodes."
msgstr ""

#: ../../topics/selectors.rst:317
msgid "Nesting selectors"
msgstr "ネストされたセレクタ"

#: ../../topics/selectors.rst:319
msgid ""
"The selection methods (``.xpath()`` or ``.css()``) return a list of "
"selectors of the same type, so you can call the selection methods for "
"those selectors too. Here's an example::"
msgstr ""
"選択メソッド（ ``.xpath()`` または ``.css()`` "
"）は同じタイプのセレクタのリストを返すので、それらのセレクタでさらに選択メソッドを呼び出すことができます。次に例を示します。"

#: ../../topics/selectors.rst:344
msgid "Selecting element attributes"
msgstr ""

#: ../../topics/selectors.rst:346
msgid ""
"There are several ways to get a value of an attribute. First, one can use"
" XPath syntax::"
msgstr ""

#: ../../topics/selectors.rst:352
msgid ""
"XPath syntax has a few advantages: it is a standard XPath feature, and "
"``@attributes`` can be used in other parts of an XPath expression - e.g. "
"it is possible to filter by attribute value."
msgstr ""

#: ../../topics/selectors.rst:356
msgid ""
"Scrapy also provides an extension to CSS selectors (``::attr(...)``) "
"which allows to get attribute values::"
msgstr ""

#: ../../topics/selectors.rst:362
msgid ""
"In addition to that, there is a ``.attrib`` property of Selector. You can"
" use it if you prefer to lookup attributes in Python code, without using "
"XPaths or CSS extensions::"
msgstr ""

#: ../../topics/selectors.rst:369
msgid ""
"This property is also available on SelectorList; it returns a dictionary "
"with attributes of a first matching element. It is convenient to use when"
" a selector is expected to give a single result (e.g. when selecting by "
"element ID, or when selecting an unique element on a page)::"
msgstr ""

#: ../../topics/selectors.rst:379
msgid "``.attrib`` property of an empty SelectorList is empty::"
msgstr ""

#: ../../topics/selectors.rst:385
msgid "Using selectors with regular expressions"
msgstr "セレクタで正規表現を使う"

#: ../../topics/selectors.rst:387
msgid ""
":class:`~scrapy.selector.Selector` also has a ``.re()`` method for "
"extracting data using regular expressions. However, unlike using "
"``.xpath()`` or ``.css()`` methods, ``.re()`` returns a list of unicode "
"strings. So you can't construct nested ``.re()`` calls."
msgstr ""
":class:`~scrapy.selector.Selector` には、正規表現を使用してデータを抽出するための ``.re()`` "
"メソッドもあります。ただし、 ``.xpath()`` や ``.css()`` メソッドを使用するのとは異なり、 ``.re()`` "
"はUnicode文字列のリストを返します。そのため、 ``.re()`` 呼び出しを入れ子にすることはできません。"

#: ../../topics/selectors.rst:392
msgid ""
"Here's an example used to extract image names from the :ref:`HTML code "
"<topics-selectors-htmlcode>` above::"
msgstr ""
"上記の :ref:`HTMLコード <topics-selectors-htmlcode>` "
"からイメージ名を抽出するのに使用される例は、次のとおりです。"

#: ../../topics/selectors.rst:402
#, fuzzy
msgid ""
"There's an additional helper reciprocating ``.get()`` (and its alias "
"``.extract_first()``) for ``.re()``, named ``.re_first()``. Use it to "
"extract just the first matching string::"
msgstr ""
"``.re()`` のための ``.extract_first()`` に対応する追加のヘルパーがあり、 ``.re_first()`` "
"という名前です。最初に一致した文字列だけを抽出するのに使用します。"

#: ../../topics/selectors.rst:412
msgid "extract() and extract_first()"
msgstr ""

#: ../../topics/selectors.rst:414
msgid ""
"If you're a long-time Scrapy user, you're probably familiar with "
"``.extract()`` and ``.extract_first()`` selector methods. Many blog posts"
" and tutorials are using them as well. These methods are still supported "
"by Scrapy, there are **no plans** to deprecate them."
msgstr ""

#: ../../topics/selectors.rst:419
msgid ""
"However, Scrapy usage docs are now written using ``.get()`` and "
"``.getall()`` methods. We feel that these new methods result in a more "
"concise and readable code."
msgstr ""

#: ../../topics/selectors.rst:423
msgid "The following examples show how these methods map to each other."
msgstr ""

#: ../../topics/selectors.rst:425
msgid "``SelectorList.get()`` is the same as ``SelectorList.extract_first()``::"
msgstr ""

#: ../../topics/selectors.rst:432
msgid "``SelectorList.getall()`` is the same as ``SelectorList.extract()``::"
msgstr ""

#: ../../topics/selectors.rst:439
msgid "``Selector.get()`` is the same as ``Selector.extract()``::"
msgstr ""

#: ../../topics/selectors.rst:446
msgid ""
"For consistency, there is also ``Selector.getall()``, which returns a "
"list::"
msgstr ""

#: ../../topics/selectors.rst:451
msgid ""
"So, the main difference is that output of ``.get()`` and ``.getall()`` "
"methods is more predictable: ``.get()`` always returns a single result, "
"``.getall()`` always returns a list of all extracted results. With "
"``.extract()`` method it was not always obvious if a result is a list or "
"not; to get a single result either ``.extract()`` or ``.extract_first()``"
" should be called."
msgstr ""

#: ../../topics/selectors.rst:461
#, fuzzy
msgid "Working with XPaths"
msgstr "XPathを相対的に操作する"

#: ../../topics/selectors.rst:463
#, fuzzy
msgid ""
"Here are some tips which may help you to use XPath with Scrapy selectors "
"effectively. If you are not much familiar with XPath yet, you may want to"
" take a look first at this `XPath tutorial`_."
msgstr ""
"`ScrapingHubブログのこの投稿`_ "
"に基づいた、ScrapyセレクタでXPathを使うときに役立つヒントをいくつか示します。XPathにまだ慣れていない場合は、まずこの "
"`XPathチュートリアル`_ を見てください。"

#: ../../topics/selectors.rst:468
msgid "Some of the tips are based on `this post from ScrapingHub's blog`_."
msgstr ""

#: ../../topics/selectors.rst:477
msgid "Working with relative XPaths"
msgstr "XPathを相対的に操作する"

#: ../../topics/selectors.rst:479
msgid ""
"Keep in mind that if you are nesting selectors and use an XPath that "
"starts with ``/``, that XPath will be absolute to the document and not "
"relative to the ``Selector`` you're calling it from."
msgstr ""
"セレクタを入れ子にして ``/`` で始まるXPathを使用する場合、そのXPathはドキュメントに対して絶対的なものであり、呼び出し元の "
"``Selector`` に対して相対的なものではないことに留意してください。"

#: ../../topics/selectors.rst:483
msgid ""
"For example, suppose you want to extract all ``<p>`` elements inside "
"``<div>`` elements. First, you would get all ``<div>`` elements::"
msgstr "たとえば、 ``<div>`` 要素内のすべての ``<p>`` 要素を抽出するとします。まず、すべての ``<div>`` 要素を取得します。"

#: ../../topics/selectors.rst:488
msgid ""
"At first, you may be tempted to use the following approach, which is "
"wrong, as it actually extracts all ``<p>`` elements from the document, "
"not only those inside ``<div>`` elements::"
msgstr ""
"最初は以下のようなアプローチを取りがちですが、これは、実際には ``<div>`` 要素の内部だけでなく、すべての ``<p>`` "
"要素を文書から抽出するため、間違っています。"

#: ../../topics/selectors.rst:495
msgid ""
"This is the proper way to do it (note the dot prefixing the ``.//p`` "
"XPath)::"
msgstr "こちらは適切な方法です（XPath ``.//p`` にドットプレフィックスがあります）。"

#: ../../topics/selectors.rst:500
msgid "Another common case would be to extract all direct ``<p>`` children::"
msgstr "もうひとつの一般的なケースは、直接の子である ``<p>`` を抽出することです。"

#: ../../topics/selectors.rst:505
msgid ""
"For more details about relative XPaths see the `Location Paths`_ section "
"in the XPath specification."
msgstr "相対XPathの詳細については、XPath仕様の `Location Paths`_ セクションを参照してください。"

#: ../../topics/selectors.rst:511
msgid "When querying by class, consider using CSS"
msgstr "クラスで検索するときに、CSSの使用を検討する"

#: ../../topics/selectors.rst:513
msgid ""
"Because an element can contain multiple CSS classes, the XPath way to "
"select elements by class is the rather verbose::"
msgstr "要素には複数のCSSクラスを含めることができるので、クラスで要素を選択するXPathの方法はかなり冗長です。"

#: ../../topics/selectors.rst:518
msgid ""
"If you use ``@class='someclass'`` you may end up missing elements that "
"have other classes, and if you just use ``contains(@class, 'someclass')``"
" to make up for that you may end up with more elements that you want, if "
"they have a different class name that shares the string ``someclass``."
msgstr ""
"``@class='someclass'`` を使用すると、要素が他のクラスも持っていると取りこぼすことがあります。そのために "
"``contains(@class, 'someclass')`` を使用しても、文字列 ``someclass`` "
"を含む異なるクラス名がある場合は、そちらも取得してしまいます。"

#: ../../topics/selectors.rst:523
msgid ""
"As it turns out, Scrapy selectors allow you to chain selectors, so most "
"of the time you can just select by class using CSS and then switch to "
"XPath when needed::"
msgstr "結局のところ、Scrapyセレクタを使うとセレクタをチェーンさせることができるので、ほとんどの場合はCSSを使用してクラスで選択し、必要に応じてXPathに切り替えることができます。"

#: ../../topics/selectors.rst:531
msgid ""
"This is cleaner than using the verbose XPath trick shown above. Just "
"remember to use the ``.`` in the XPath expressions that will follow."
msgstr "これは、上記の冗長なXPathのトリックを使用するよりもクリーンです。続くXPath式で ``.`` を使用することを忘れないでください。"

#: ../../topics/selectors.rst:535
msgid "Beware of the difference between //node[1] and (//node)[1]"
msgstr "//node[1] と (//node)[1] の違いに注意"

#: ../../topics/selectors.rst:537
msgid ""
"``//node[1]`` selects all the nodes occurring first under their "
"respective parents."
msgstr "``//node[1]`` は、それぞれの親の下に最初に出現するすべてのノードを選択します。"

#: ../../topics/selectors.rst:539
msgid ""
"``(//node)[1]`` selects all the nodes in the document, and then gets only"
" the first of them."
msgstr "``(//node)[1]`` はドキュメント内のすべてのノードを選択し、それらのうち最初のノードだけを取得します。"

#: ../../topics/selectors.rst:541 ../../topics/selectors.rst:587
msgid "Example::"
msgstr "例："

#: ../../topics/selectors.rst:557
msgid "This gets all first ``<li>``  elements under whatever it is its parent::"
msgstr "こちらは、親であるものが何であれ、最初の ``<li>`` 要素をすべて取得します。"

#: ../../topics/selectors.rst:562
msgid "And this gets the first ``<li>``  element in the whole document::"
msgstr "そしてこちらは、文書全体の最初の ``<li>`` 要素を取得します。"

#: ../../topics/selectors.rst:567
msgid "This gets all first ``<li>``  elements under an ``<ul>``  parent::"
msgstr "こちらは、親が ``<ul>`` である最初の ``<li>`` 要素をすべて取得します。"

#: ../../topics/selectors.rst:572
msgid ""
"And this gets the first ``<li>``  element under an ``<ul>``  parent in "
"the whole document::"
msgstr "そしてこちらは、文書全体の最初の、親が ``<ul>`` である ``<li>`` 要素を取得します。"

#: ../../topics/selectors.rst:578
msgid "Using text nodes in a condition"
msgstr "条件内でのテキストノードの使用"

#: ../../topics/selectors.rst:580
msgid ""
"When you need to use the text content as argument to an `XPath string "
"function`_, avoid using ``.//text()`` and use just ``.`` instead."
msgstr ""
"`XPath文字列関数`_ の引数としてテキストコンテンツを使う必要がある場合は、 ``.//text()`` を使用せず、代わりに ``.`` "
"を使用してください。"

#: ../../topics/selectors.rst:583
msgid ""
"This is because the expression ``.//text()`` yields a collection of text "
"elements -- a *node-set*. And when a node-set is converted to a string, "
"which happens when it is passed as argument to a string function like "
"``contains()`` or ``starts-with()``, it results in the text for the first"
" element only."
msgstr ""
"これは、式 ``.//text()`` がテキスト要素の集合、つまり *ノードセット* を生成するためです。そして、ノードセットが "
"``contains()`` や ``starts-with()`` "
"のような文字列関数に引数として渡され文字列に変換されるとき、最初の要素のみのテキストを返します。"

#: ../../topics/selectors.rst:592
msgid "Converting a *node-set* to string::"
msgstr "ノードセットを文字列に変換します。"

#: ../../topics/selectors.rst:599
msgid ""
"A *node* converted to a string, however, puts together the text of itself"
" plus of all its descendants::"
msgstr "ただし、文字列に変換された *ノード* は、それ自体のテキストとそのすべての子孫のテキストをまとめたものです。"

#: ../../topics/selectors.rst:606
msgid "So, using the ``.//text()`` node-set won't select anything in this case::"
msgstr "したがって、 ``.//text()`` ノードセットを使用しても、この場合は何も選択されません。"

#: ../../topics/selectors.rst:611
msgid "But using the ``.`` to mean the node, works::"
msgstr "しかし、ノードを意味する ``.`` を使用すると、うまくいきます。"

#: ../../topics/selectors.rst:621
msgid "Variables in XPath expressions"
msgstr "XPath式の中の変数"

#: ../../topics/selectors.rst:623
msgid ""
"XPath allows you to reference variables in your XPath expressions, using "
"the ``$somevariable`` syntax. This is somewhat similar to parameterized "
"queries or prepared statements in the SQL world where you replace some "
"arguments in your queries with placeholders like ``?``, which are then "
"substituted with values passed with the query."
msgstr ""
"XPathでは、 ``$somevariable`` 構文を使用して、XPath式内の変数を参照できます。 これは、クエリの引数の一部を "
"``?`` "
"などのプレースホルダに置き換えたSQLの世界でのパラメータ化クエリやプリペアドステートメントとやや似ています。これらはクエリに渡された値に置き換えられます。"

#: ../../topics/selectors.rst:629
msgid ""
"Here's an example to match an element based on its \"id\" attribute "
"value, without hard-coding it (that was shown previously)::"
msgstr "次の例は、ハードコーディングをせずに、その「id」属性値に基づいて要素を照合します（以前に示したものです）。"

#: ../../topics/selectors.rst:636
msgid ""
"Here's another example, to find the \"id\" attribute of a ``<div>`` tag "
"containing five ``<a>`` children (here we pass the value ``5`` as an "
"integer)::"
msgstr ""
"別の例として、5つの ``<a>`` の子を含む ``<div>`` タグの「id」属性を見つけるものを示します（ここでは値 ``5`` "
"を整数として渡します）。"

#: ../../topics/selectors.rst:642
msgid ""
"All variable references must have a binding value when calling "
"``.xpath()`` (otherwise you'll get a ``ValueError: XPath error:`` "
"exception). This is done by passing as many named arguments as necessary."
msgstr ""
"すべての変数参照は、 ``.xpath()`` を呼び出すときにバインド値を持つ必要があります（そうでなければ、 ``ValueError: "
"XPath error:`` 例外が発生します）。これは、必要な数の名前付き引数を渡すことによって行われます。"

#: ../../topics/selectors.rst:646
msgid ""
"`parsel`_, the library powering Scrapy selectors, has more details and "
"examples on `XPath variables`_."
msgstr "Scrapyのセレクタを強力にしているライブラリ `parsel`_ には、 `XPath変数`_ に関する詳細と例があります。"

#: ../../topics/selectors.rst:655
msgid "Removing namespaces"
msgstr "ネームスペースを削除する"

#: ../../topics/selectors.rst:657
msgid ""
"When dealing with scraping projects, it is often quite convenient to get "
"rid of namespaces altogether and just work with element names, to write "
"more simple/convenient XPaths. You can use the "
":meth:`Selector.remove_namespaces` method for that."
msgstr ""
"スクレイピングプロジェクトを扱うときに、ネームスペースを完全に取り除くと、要素名を扱うだけで、より単純で便利なXPathを書くことが非常に便になります。これには"
" :meth:`Selector.remove_namespaces` メソッドを使用できます。"

#: ../../topics/selectors.rst:662
#, fuzzy
msgid ""
"Let's show an example that illustrates this with the Python Insider blog "
"atom feed."
msgstr "GitHubブログのAtomフィードでこれを説明する例を見てみましょう。"

#: ../../topics/selectors.rst:666
msgid "First, we open the shell with the url we want to scrape::"
msgstr "まず、抽出したいURLでシェルを開きます。"

#: ../../topics/selectors.rst:670
msgid "This is how the file starts::"
msgstr ""

#: ../../topics/selectors.rst:683
msgid ""
"You can see several namespace declarations including a default "
"\"http://www.w3.org/2005/Atom\" and another one using the \"gd:\" prefix "
"for \"http://schemas.google.com/g/2005\"."
msgstr ""

#: ../../topics/selectors.rst:689
msgid ""
"Once in the shell we can try selecting all ``<link>`` objects and see "
"that it doesn't work (because the Atom XML namespace is obfuscating those"
" nodes)::"
msgstr ""
"シェルに入ったら、すべての ``<link>`` オブジェクトを選択しても機能しないことを確認します（Atom "
"XMLネームスペースがこれらのノードを見づらくしているため）。"

#: ../../topics/selectors.rst:695
msgid ""
"But once we call the :meth:`Selector.remove_namespaces` method, all nodes"
" can be accessed directly by their names::"
msgstr ""
"しかし、 :meth:`Selector.remove_namespaces` "
"メソッドを呼び出すと、すべてのノードにそれらの名前で直接アクセスできます。"

#: ../../topics/selectors.rst:704
msgid ""
"If you wonder why the namespace removal procedure isn't always called by "
"default instead of having to call it manually, this is because of two "
"reasons, which, in order of relevance, are:"
msgstr "ネームスペースの削除を手動で呼び出すのではなく、デフォルトで常に呼び出されない理由は、以下の2つです。"

#: ../../topics/selectors.rst:708
#, fuzzy
msgid ""
"Removing namespaces requires to iterate and modify all nodes in the "
"document, which is a reasonably expensive operation to perform by default"
" for all documents crawled by Scrapy"
msgstr "ネームスペースを削除するには、ドキュメント内のすべてのノードを反復して変更する必要があります。これは、Scrapyによってクロールされたすべてのドキュメントに対して実行するには、かなり手間のかかる操作です。"

#: ../../topics/selectors.rst:712
msgid ""
"There could be some cases where using namespaces is actually required, in"
" case some element names clash between namespaces. These cases are very "
"rare though."
msgstr "非常にまれなケースですが、いくつかの要素名がネームスペースの間で衝突する場合のために、ネームスペースの使用が実際に必要とされる場合があるかもしれません。"

#: ../../topics/selectors.rst:718
msgid "Using EXSLT extensions"
msgstr "EXSLT拡張機能を使う"

#: ../../topics/selectors.rst:720
#, fuzzy
msgid ""
"Being built atop `lxml`_, Scrapy selectors support some `EXSLT`_ "
"extensions and come with these pre-registered namespaces to use in XPath "
"expressions:"
msgstr ""
"Scrapyのセレクタは `lxml`_ の上に構築されているために、いくつかの `EXSLT`_ "
"拡張もサポートしており、XPath式で使用するために予約されたネームスペースがあります。"

#: ../../topics/selectors.rst:725
msgid "prefix"
msgstr "プレフィクス"

#: ../../topics/selectors.rst:725
msgid "namespace"
msgstr "ネームスペース"

#: ../../topics/selectors.rst:725
msgid "usage"
msgstr "使用法"

#: ../../topics/selectors.rst:727
msgid "re"
msgstr ""

#: ../../topics/selectors.rst:727
#, fuzzy
msgid "\\http://exslt.org/regular-expressions"
msgstr "正規表現"

#: ../../topics/selectors.rst:727
msgid "`regular expressions`_"
msgstr ""

#: ../../topics/selectors.rst:728
msgid "set"
msgstr ""

#: ../../topics/selectors.rst:728
msgid "\\http://exslt.org/sets"
msgstr ""

#: ../../topics/selectors.rst:728
msgid "`set manipulation`_"
msgstr ""

#: ../../topics/selectors.rst:732
msgid "Regular expressions"
msgstr "正規表現"

#: ../../topics/selectors.rst:734
msgid ""
"The ``test()`` function, for example, can prove quite useful when XPath's"
" ``starts-with()`` or ``contains()`` are not sufficient."
msgstr ""
"たとえば、 ``test()`` 関数は、XPathの ``starts-with()`` や ``contains()`` "
"だけでは不十分な場合に非常に便利です。"

#: ../../topics/selectors.rst:737
msgid ""
"Example selecting links in list item with a \"class\" attribute ending "
"with a digit::"
msgstr "数字で終わる「class」属性を持つリスト項目内のリンクを選択する例："

#: ../../topics/selectors.rst:758
msgid ""
"C library ``libxslt`` doesn't natively support EXSLT regular expressions "
"so `lxml`_'s implementation uses hooks to Python's ``re`` module. Thus, "
"using regexp functions in your XPath expressions may add a small "
"performance penalty."
msgstr ""
"Cライブラリ ``libxslt`` はEXSLT正規表現をネイティブサポートしていないため、 `lxml`_ の実装はPythonの "
"``re`` モジュールへのフックを使用します。そのため、XPath式で正規表現関数を使用すると、パフォーマンスが若干低下する可能性があります。"

#: ../../topics/selectors.rst:764
msgid "Set operations"
msgstr "集合演算"

#: ../../topics/selectors.rst:766
msgid ""
"These can be handy for excluding parts of a document tree before "
"extracting text elements for example."
msgstr "これらは、例えばテキスト要素を抽出する前に文書ツリーの一部を除外するのに便利です。"

#: ../../topics/selectors.rst:769
msgid ""
"Example extracting microdata (sample content taken from "
"http://schema.org/Product) with groups of itemscopes and corresponding "
"itemprops::"
msgstr ""
"itemscopeとそれに対応するitempropのグループを含むmicrodataの抽出例（ http://schema.org/Product"
" から取得したサンプルコンテンツ）："

#: ../../topics/selectors.rst:854
msgid ""
"Here we first iterate over ``itemscope`` elements, and for each one, we "
"look for all ``itemprops`` elements and exclude those that are themselves"
" inside another ``itemscope``."
msgstr ""
"ここではまず ``itemscope`` 要素を反復し、それぞれに対して ``itemprops`` 要素をすべて探し、別の "
"``itemscope`` 内にあるものを除外します。"

#: ../../topics/selectors.rst:863
msgid "Other XPath extensions"
msgstr ""

#: ../../topics/selectors.rst:865
msgid ""
"Scrapy selectors also provide a sorely missed XPath extension function "
"``has-class`` that returns ``True`` for nodes that have all of the "
"specified HTML classes."
msgstr ""

#: ../../topics/selectors.rst:871
msgid "For the following HTML::"
msgstr ""

#: ../../topics/selectors.rst:880
msgid "You can use it like this::"
msgstr ""

#: ../../topics/selectors.rst:890
msgid ""
"So XPath ``//p[has-class(\"foo\", \"bar-baz\")]`` is roughly equivalent "
"to CSS ``p.foo.bar-baz``.  Please note, that it is slower in most of the "
"cases, because it's a pure-Python function that's invoked for every node "
"in question whereas the CSS lookup is translated into XPath and thus runs"
" more efficiently, so performance-wise its uses are limited to situations"
" that are not easily described with CSS selectors."
msgstr ""

#: ../../topics/selectors.rst:897
msgid "Parsel also simplifies adding your own XPath extensions."
msgstr ""

#: of parsel.xpathfuncs.set_xpathfunc:1
msgid "Register a custom extension function to use in XPath expressions."
msgstr ""

#: of parsel.xpathfuncs.set_xpathfunc:3
msgid ""
"The function ``func`` registered under ``fname`` identifier will be "
"called for every matching node, being passed a ``context`` parameter as "
"well as any parameters passed from the corresponding XPath expression."
msgstr ""

#: of parsel.xpathfuncs.set_xpathfunc:7
msgid "If ``func`` is ``None``, the extension function will be removed."
msgstr ""

#: of parsel.xpathfuncs.set_xpathfunc:9
msgid "See more `in lxml documentation`_."
msgstr ""

#: ../../topics/selectors.rst:905
msgid "Built-in Selectors reference"
msgstr "組み込みのセレクタリファレンス"

#: ../../topics/selectors.rst:911
msgid "Selector objects"
msgstr "Selectorオブジェクト"

#: of scrapy.selector.Selector:1
msgid ""
"An instance of :class:`Selector` is a wrapper over response to select "
"certain parts of its content."
msgstr ":class:`Selector` インスタンスは、コンテンツの特定の部分を選択するための、レスポンスに対するラッパーです。"

#: of scrapy.selector.Selector:4
msgid ""
"``response`` is an :class:`~scrapy.http.HtmlResponse` or an "
":class:`~scrapy.http.XmlResponse` object that will be used for selecting "
"and extracting data."
msgstr ""
"``response`` は、データの選択および抽出に使用される :class:`~scrapy.http.HtmlResponse` または "
":class:`~scrapy.http.XmlResponse` オブジェクトです。"

#: of scrapy.selector.Selector:8
msgid ""
"``text`` is a unicode string or utf-8 encoded text for cases when a "
"``response`` isn't available. Using ``text`` and ``response`` together is"
" undefined behavior."
msgstr ""
"``text`` は、 ``response`` が有効でない場合のUnicode文字列またはUTF-8でエンコードされたテキストです。 "
"``text`` と ``response`` を一緒に使用することは未定義の動作です。"

#: of scrapy.selector.Selector:12
msgid ""
"``type`` defines the selector type, it can be ``\"html\"``, ``\"xml\"`` "
"or ``None`` (default)."
msgstr ""
"``type`` はセレクタタイプを定義します。  ``\"html\"``, ``\"xml\"``, ``None`` "
"（デフォルト）のいずれかです。"

#: of scrapy.selector.Selector:15
msgid ""
"If ``type`` is ``None``, the selector automatically chooses the best type"
" based on ``response`` type (see below), or defaults to ``\"html\"`` in "
"case it is used together with ``text``."
msgstr ""
"``type`` が ``None`` の場合、セレクタは自動的に ``response`` "
"の種類（下記参照）に基づいて最適なタイプを選択します。 ``text`` と共に使用される場合はデフォルトの ``\"html\"`` "
"になります。"

#: of scrapy.selector.Selector:19
msgid ""
"If ``type`` is ``None`` and a ``response`` is passed, the selector type "
"is inferred from the response type as follows:"
msgstr "``type`` が ``None`` で ``response`` が渡された場合、セレクタタイプは次のようにレスポンスタイプから推測されます。"

#: of scrapy.selector.Selector:22
msgid "``\"html\"`` for :class:`~scrapy.http.HtmlResponse` type"
msgstr ":class:`~scrapy.http.HtmlResponse` タイプの場合は ``\"html\"``"

#: of scrapy.selector.Selector:23
msgid "``\"xml\"`` for :class:`~scrapy.http.XmlResponse` type"
msgstr ":class:`~scrapy.http.XmlResponse` タイプの場合は ``\"xml\"``"

#: of scrapy.selector.Selector:24
msgid "``\"html\"`` for anything else"
msgstr "その他の場合は ``\"html\"``"

#: of scrapy.selector.Selector:26
msgid ""
"Otherwise, if ``type`` is set, the selector type will be forced and no "
"detection will occur."
msgstr "``type`` が設定されている場合は、セレクタタイプは強制され、検出は行われません。"

#: of scrapy.selector.Selector.xpath:1
msgid ""
"Find nodes matching the xpath ``query`` and return the result as a "
":class:`SelectorList` instance with all elements flattened. List elements"
" implement :class:`Selector` interface too."
msgstr ""
"XPathクエリ ``query`` に一致するノードを見つけ、その結果をすべての要素がフラット化された "
":class:`SelectorList` インスタンスとして返します。リストの要素は :class:`Selector` "
"インターフェースも実装しています。"

#: of scrapy.selector.Selector.xpath:5
msgid "``query`` is a string containing the XPATH query to apply."
msgstr "``query`` は適用するXPathクエリの文字列です。"

#: of scrapy.selector.Selector.xpath:7 scrapy.selector.SelectorList.xpath:6
msgid ""
"``namespaces`` is an optional ``prefix: namespace-uri`` mapping (dict) "
"for additional prefixes to those registered with "
"``register_namespace(prefix, uri)``. Contrary to "
"``register_namespace()``, these prefixes are not saved for future calls."
msgstr ""

#: of scrapy.selector.Selector.xpath:12 scrapy.selector.SelectorList.xpath:11
msgid ""
"Any additional named arguments can be used to pass values for XPath "
"variables in the XPath expression, e.g.::"
msgstr ""

#: ../../topics/selectors.rst:919
msgid "For convenience, this method can be called as ``response.xpath()``"
msgstr "利便性のため、このメソッドは ``response.xpath()`` でも呼ぶことができます。"

#: of scrapy.selector.Selector.css:1
msgid "Apply the given CSS selector and return a :class:`SelectorList` instance."
msgstr "与えられたCSSセレクタを適用して :class:`SelectorList` インスタンスを返します。"

#: of scrapy.selector.Selector.css:3
msgid "``query`` is a string containing the CSS selector to apply."
msgstr "``query`` は適用するCSSセレクタの文字列です。"

#: of scrapy.selector.Selector.css:5
msgid ""
"In the background, CSS queries are translated into XPath queries using "
"`cssselect`_ library and run ``.xpath()`` method."
msgstr ""
"バックグラウンドでは、CSSクエリは `cssselect`_ ライブラリを使用してXPathクエリに変換され、 ``.xpath()`` "
"メソッドが実行されます。"

#: ../../topics/selectors.rst:925
#, fuzzy
msgid "For convenience, this method can be called as ``response.css()``"
msgstr "利便性のため、このメソッドは ``response.css()`` でも呼ぶことができます。"

#: of scrapy.selector.Selector.get:1
#, fuzzy
msgid ""
"Serialize and return the matched nodes in a single unicode string. "
"Percent encoded content is unquoted."
msgstr "一致したノードをシリアライズし、Unicode文字列のリストとして返します。パーセントでエンコードされたコンテンツはアンクォートされます。"

#: ../../topics/selectors.rst:929 ../../topics/selectors.rst:961
#: ../../topics/selectors.rst:965
msgid "See also: :ref:`old-extraction-api`"
msgstr ""

#: of scrapy.selector.Selector.re:1
msgid ""
"Apply the given regex and return a list of unicode strings with the "
"matches."
msgstr "与えられた正規表現を適用して、一致したUnicode文字列のリストを返します。"

#: of scrapy.selector.Selector.re:4
#, fuzzy
msgid ""
"``regex`` can be either a compiled regular expression or a string which "
"will be compiled to a regular expression using ``re.compile(regex)``."
msgstr ""
"``regex`` はコンパイルされた正規表現か、 ``re.compile(regex)`` "
"を使って正規表現にコンパイルされる文字列のどちらかです。"

#: of scrapy.selector.Selector.re:7 scrapy.selector.Selector.re_first:5
#: scrapy.selector.SelectorList.re:4 scrapy.selector.SelectorList.re_first:6
msgid ""
"By default, character entity references are replaced by their "
"corresponding character (except for ``&amp;`` and ``&lt;``. Passing "
"``replace_entities`` as ``False`` switches off these replacements."
msgstr ""

#: of scrapy.selector.Selector.re_first:1
msgid ""
"Apply the given regex and return the first unicode string which matches. "
"If there is no match, return the default value (``None`` if the argument "
"is not provided)."
msgstr ""

#: of scrapy.selector.Selector.register_namespace:1
#, fuzzy
msgid ""
"Register the given namespace to be used in this :class:`Selector`. "
"Without registering namespaces you can't select or extract data from non-"
"standard namespaces. See :ref:`selector-examples-xml`."
msgstr ""
"この :class:`Selector` "
"で使用されるネームスペースを登録します。ネームスペースを登録しないと、非標準のネームスペースからデータを選択または抽出することはできません。下記の例を参照してください。"

#: of scrapy.selector.Selector.remove_namespaces:1
#, fuzzy
msgid ""
"Remove all namespaces, allowing to traverse the document using namespace-"
"less xpaths. See :ref:`removing-namespaces`."
msgstr "すべてのネームスペースを削除し、ネームスペースのないXPathを使用して文書をトラバースできるようにします。下記の例を参照してください。"

#: of scrapy.selector.Selector.__bool__:1
#, fuzzy
msgid ""
"Return ``True`` if there is any real content selected or ``False`` "
"otherwise.  In other words, the boolean value of a :class:`Selector` is "
"given by the contents it selects."
msgstr ""
"実際のコンテンツが選択されていれば ``True`` を、そうでなければ ``False`` を返します。つまり、 "
":class:`Selector` のこのブール値は、選択した内容によって決まります。"

#: of scrapy.selector.Selector.getall:1
#, fuzzy
msgid ""
"Serialize and return the matched node in a 1-element list of unicode "
"strings."
msgstr "一致したノードをシリアライズし、Unicode文字列のリストとして返します。パーセントでエンコードされたコンテンツはアンクォートされます。"

#: ../../topics/selectors.rst:947
msgid ""
"This method is added to Selector for consistency; it is more useful with "
"SelectorList. See also: :ref:`old-extraction-api`"
msgstr ""

#: ../../topics/selectors.rst:951
msgid "SelectorList objects"
msgstr "SelectorListオブジェクト"

#: of scrapy.selector.SelectorList:1
msgid ""
"The :class:`SelectorList` class is a subclass of the builtin ``list`` "
"class, which provides a few additional methods."
msgstr ":class:`SelectorList` クラスは組み込みの ``list`` クラスのサブクラスで、いくつかの追加メソッドが提供されています。"

#: of scrapy.selector.SelectorList.xpath:1
msgid ""
"Call the ``.xpath()`` method for each element in this list and return "
"their results flattened as another :class:`SelectorList`."
msgstr ""
"このリストの各要素に対して ``.xpath()`` メソッドを呼び出し、それらの結果を別の :class:`SelectorList` "
"としてフラット化して返します。"

#: of scrapy.selector.SelectorList.xpath:4
msgid "``query`` is the same argument as the one in :meth:`Selector.xpath`"
msgstr "``query`` は :meth:`Selector.xpath` のものと同じ引数です。"

#: of scrapy.selector.SelectorList.css:1
msgid ""
"Call the ``.css()`` method for each element in this list and return their"
" results flattened as another :class:`SelectorList`."
msgstr ""
"このリストの各要素に対して ``.css()`` メソッドを呼び出し、それらの結果を別の :class:`SelectorList` "
"としてフラット化して返します。"

#: of scrapy.selector.SelectorList.css:4
msgid "``query`` is the same argument as the one in :meth:`Selector.css`"
msgstr "``query`` は :meth:`Selector.css` のものと同じ引数です。"

#: of scrapy.selector.SelectorList.getall:1
#, fuzzy
msgid ""
"Call the ``.extract()`` method for each element is this list and return "
"their results flattened, as a list of unicode strings."
msgstr ""
"このリストの各要素に対して ``.extract()`` "
"メソッドを呼び出し、それらの結果をUnicode文字列のリストとしてフラット化して返します。"

#: of scrapy.selector.SelectorList.get:1
msgid ""
"Return the result of ``.extract()`` for the first element in this list. "
"If the list is empty, return the default value."
msgstr ""

#: of scrapy.selector.SelectorList.re:1
msgid ""
"Call the ``.re()`` method for each element in this list and return their "
"results flattened, as a list of unicode strings."
msgstr "このリストの各要素に対して ``.re()`` メソッドを呼び出し、それらの結果をUnicode文字列のリストとしてフラット化して返します。"

#: of scrapy.selector.SelectorList.re_first:1
msgid ""
"Call the ``.re()`` method for the first element in this list and return "
"the result in an unicode string. If the list is empty or the regex "
"doesn't match anything, return the default value (``None`` if the "
"argument is not provided)."
msgstr ""

#: ../../topics/selectors.rst:978
#, fuzzy
msgid "Examples"
msgstr "例："

#: ../../topics/selectors.rst:983
msgid "Selector examples on HTML response"
msgstr "HTMLレスポンスに関するセレクタの例"

#: ../../topics/selectors.rst:985
#, fuzzy
msgid ""
"Here are some :class:`Selector` examples to illustrate several concepts. "
"In all cases, we assume there is already a :class:`Selector` instantiated"
" with a :class:`~scrapy.http.HtmlResponse` object like this::"
msgstr ""
"いくつかの概念を説明するために :class:`Selector` の例を紹介します。すべての例において、以下のような "
":class:`~scrapy.http.HtmlResponse` オブジェクトでインスタンス化された :class:`Selector` "
"がすでにあると仮定します。"

#: ../../topics/selectors.rst:991
msgid ""
"Select all ``<h1>`` elements from an HTML response body, returning a list"
" of :class:`Selector` objects (ie. a :class:`SelectorList` object)::"
msgstr ""
"HTMLのレスポンスボディからすべての ``<h1>`` 要素を選択し、 :class:`Selector` オブジェクトのリスト（つまり "
":class:`SelectorList` オブジェクト）を返します。"

#: ../../topics/selectors.rst:996
msgid ""
"Extract the text of all ``<h1>`` elements from an HTML response body, "
"returning a list of unicode strings::"
msgstr "HTMLのレスポンスボディからすべての ``<h1>`` 要素のテキストを抽出し、Unicode文字列のリストを返します。"

#: ../../topics/selectors.rst:1002
msgid "Iterate over all ``<p>`` tags and print their class attribute::"
msgstr "すべての ``<p>`` タグを繰り返し処理し、それらのclass属性を出力します。"

#: ../../topics/selectors.rst:1011
msgid "Selector examples on XML response"
msgstr "XMLレスポンスに関するセレクタの例"

#: ../../topics/selectors.rst:1013
#, fuzzy
msgid ""
"Here are some examples to illustrate concepts for :class:`Selector` "
"objects instantiated with an :class:`~scrapy.http.XmlResponse` object::"
msgstr ""
"いくつかの概念を説明するための例を示します。どちらの場合も、以下のような :class:`~scrapy.http.XmlResponse` "
"オブジェクトでインスタンス化された :class:`Selector` がすでにあると仮定します。"

#: ../../topics/selectors.rst:1018
msgid ""
"Select all ``<product>`` elements from an XML response body, returning a "
"list of :class:`Selector` objects (ie. a :class:`SelectorList` object)::"
msgstr ""
"XMLのレスポンスボディからすべての ``<product>`` 要素を選択し、 :class:`Selector` オブジェクトのリスト（つまり"
" :class:`SelectorList` オブジェクト）を返します。"

#: ../../topics/selectors.rst:1023
msgid ""
"Extract all prices from a `Google Base XML feed`_ which requires "
"registering a namespace::"
msgstr "ネームスペースを登録する必要がある `Google Base XML feed`_ フィードからすべての価格を抽出します。"

#~ msgid ""
#~ "Scrapy selectors are built over the "
#~ "`lxml`_ library, which means they're "
#~ "very similar in speed and parsing "
#~ "accuracy."
#~ msgstr "Scrapyのセレクタは、 `lxml`_ ライブラリ上に構築されていますので、速度と解析の正確さが非常によく似ています。"

#~ msgid ""
#~ "This page explains how selectors work"
#~ " and describes their API which is "
#~ "very small and simple, unlike the "
#~ "`lxml`_ API which is much bigger "
#~ "because the `lxml`_ library can be "
#~ "used for many other tasks, besides "
#~ "selecting markup documents."
#~ msgstr ""
#~ "このページでは、セレクタがどのように動作するかを説明します。また、 `lxml`_ "
#~ "ライブラリは他の多くのタスクに使用できるため、巨大な `lxml`_ "
#~ "APIとは異なり、非常に小さくシンプルなAPIについて説明します。"

#~ msgid ""
#~ "For a complete reference of the "
#~ "selectors API see :ref:`Selector reference "
#~ "<topics-selectors-ref>`"
#~ msgstr ""
#~ "セレクタAPIの詳細なリファレンスについては、 :ref:`Selector reference "
#~ "<topics-selectors-ref>` を参照してください。"

#~ msgid ""
#~ "Scrapy selectors are instances of "
#~ ":class:`~scrapy.selector.Selector` class constructed "
#~ "by passing **text** or "
#~ ":class:`~scrapy.http.TextResponse` object. It "
#~ "automatically chooses the best parsing "
#~ "rules (XML vs HTML) based on input"
#~ " type::"
#~ msgstr ""
#~ "Scrapyのセレクタは、 **テキスト** または "
#~ ":class:`~scrapy.http.TextResponse` オブジェクトを渡すことによって構築された "
#~ ":class:`~scrapy.selector.Selector` "
#~ "クラスのインスタンスです。入力タイプに基づいて最適な解析ルール（XMLとHTML）を自動的に選択します。"

#~ msgid "Constructing from text::"
#~ msgstr "テキストから構築する："

#~ msgid "Constructing from response::"
#~ msgstr "Responseから構築する："

#~ msgid ""
#~ "For convenience, response objects expose "
#~ "a selector on `.selector` attribute, "
#~ "it's totally OK to use this "
#~ "shortcut when possible::"
#~ msgstr ""
#~ "利便性のため、responseオブジェクトは `.selector` "
#~ "属性にセレクタを公開しています。可能であればこのショートカットを使用しても問題ありません。"

#~ msgid "https://doc.scrapy.org/en/latest/_static/selectors-sample1.html"
#~ msgstr ""

#~ msgid "Here's its HTML code:"
#~ msgstr "そのHTMLコードは次のとおりです。"

#~ msgid "Some XPath tips"
#~ msgstr "XPathヒント集"

#~ msgid ""
#~ "Note that ``re()`` and ``re_first()`` "
#~ "both decode HTML entities (except "
#~ "``&lt;`` and ``&amp;``)."
#~ msgstr ""
#~ "``re()`` と ``re_first()`` "
#~ "はどちらもHTMLエンティティをデコードすることに注意してください（ ``&lt;`` と "
#~ "``&amp;`` を除く）。"

